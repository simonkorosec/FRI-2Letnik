# setwd("C:/Users/Simon Korošec/Documents/GitHub/FRI-2Letnik/UI/Seminarska")
pod <- read.table("podatkiSem1.txt", sep=",", header=T)
 setwd("C:/Users/Simon Korošec/Documents/GitHub/FRI-2Letnik/UI/Seminarska")
pod <- read.table("podatkiSem1.txt", sep=",", header=T)
pod$Glob_sevanje_min <- NULL
 install.packages("FSelector") 
?FSelector 
??FSelector 
?data
library(rpart)
data(iris)
summary(data)
?data
ls()
iris
15+7+3+5
weights <- relief(PM10~., pod, neighbours.count = 5, sample.size = 20)
library(FSelector)
weights <- relief(PM10~., pod, neighbours.count = 5, sample.size = 20)
print(weights)
sort(print(weights))
sort(print(weights), decreasing = TRUE)
pod$Datum <- as.Date(pod$Datum, "%Y-%m-%d")
pod$Mesec <- months(pod$Datum)
pod$Mesec <- as.factor(pod$Mesec)
pod$Datum <- NULL
pod$O3 <- cut(pod$O3, c(-Inf, 60, 120, 180, Inf), labels=c("NIZKA", "SREDNJA", "VISOKA", "EKSTREMNA"))
pod$PM10 <- cut(pod$PM10, c(-Inf,35,Inf),labels=c("NIZKA","VISOKA"))
weights <- relief(PM10~., pod, neighbours.count = 5, sample.size = 20)
sort(print(weights), decreasing = TRUE)
pod <- read.table("podatkiSem1.txt", sep=",", header=T)
pod$Glob_sevanje_min <- NULL
pod$Datum <- as.Date(pod$Datum, "%Y-%m-%d")
pod$Mesec <- months(pod$Datum)
pod$Mesec <- as.factor(pod$Mesec)
pod$Dan   <- weekdays(pod$Datum)
summary(pod$Dan)
pod$Dan <- as.factor(pod$Dan)
summary(pod$Dan)
pod$Datum <- NULL
evaluator <- function(subset) {
#k-fold cross validation
k <- 5
splits <- runif(nrow(pod))
results = sapply(1:k, function(i) {
test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
train.idx <- !test.idx
test <- pod[test.idx, , drop=FALSE]
train <- pod[train.idx, , drop=FALSE]
tree <- rpart(as.simple.formula(subset, "PM10"), train)
error.rate = sum(test$PM10 != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
})
print(subset)
print(mean(results))
return(mean(results))
}
evaluator <- function(subset) {
print("--DELA--")
#k-fold cross validation
k <- 5
splits <- runif(nrow(pod))
results = sapply(1:k, function(i) {
test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
train.idx <- !test.idx
test <- pod[test.idx, , drop=FALSE]
train <- pod[train.idx, , drop=FALSE]
tree <- rpart(as.simple.formula(subset, "PM10"), train)
error.rate = sum(test$PM10 != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
})
print(subset)
print(mean(results))
return(mean(results))
}
subset <- forward.search(names(pod)[-5], evaluator)
f <- as.simple.formula(subset, "PM10")
print(f)
subset <- forward.search(names(pod)[-5], evaluator)
?predict
names(pod)
evaluator <- function(subset) {
print("--DELA--")
flush.console()
#k-fold cross validation
k <- 5
splits <- runif(nrow(pod))
results = sapply(1:k, function(i) {
test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
train.idx <- !test.idx
test <- pod[test.idx, , drop=FALSE]
train <- pod[train.idx, , drop=FALSE]
tree <- rpart(as.simple.formula(subset, "PM10"), train)
error.rate <- sum(test$PM10 != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
})
print(subset)
print(mean(results))
return(mean(results))
}
subset <- forward.search(names(pod)[-24], evaluator)
library(rpart)
subset <- forward.search(names(pod)[-24], evaluator)
data(iris)
irsis
ls
ls()
iris
pod
ls()
class(iris)
class(pod)
iris <- pod
  evaluator <- function(subset) {
    #k-fold cross validation
    k <- 5
    splits <- runif(nrow(iris))
    results = sapply(1:k, function(i) {
      test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
      train.idx <- !test.idx
      test <- iris[test.idx, , drop=FALSE]
      train <- iris[train.idx, , drop=FALSE]
      tree <- rpart(as.simple.formula(subset, "PM10"), train)
      error.rate = sum(test$PM10 != predict(tree, test, type="c")) / nrow(test)
      return(1 - error.rate)
    })
    print(subset)
    print(mean(results))
    return(mean(results))
  }
  subset <- forward.search(names(iris)[-24], evaluator)
iris <- pod
  evaluator <- function(subset) {
    #k-fold cross validation
    k <- 5
    splits <- runif(nrow(iris))
    results = sapply(1:k, function(i) {
      test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
      train.idx <- !test.idx
      test <- iris[test.idx, , drop=FALSE]
      train <- iris[train.idx, , drop=FALSE]
      tree <- rpart(as.simple.formula(subset, "PM10"), train)
      error.rate = sum(test$PM10 != predict(tree, test, type="c")) / nrow(test)
      return(1 - error.rate)
    })
    print(subset)
    print(mean(results))
    return(mean(results))
  }
  subset <- forward.search(names(iris)[-24], evaluator)
  f <- as.simple.formula(subset, "PM10")
  print(f)
data(iris)
  evaluator <- function(subset) {
    #k-fold cross validation
    k <- 5
    splits <- runif(nrow(iris))
    results = sapply(1:k, function(i) {
      test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
      train.idx <- !test.idx
      test <- iris[test.idx, , drop=FALSE]
      train <- iris[train.idx, , drop=FALSE]
      tree <- rpart(as.simple.formula(subset, "Species"), train)
      error.rate = sum(test$Species != predict(tree, test, type="c")) / nrow(test)
      return(1 - error.rate)
    })
    print(subset)
    print(mean(results))
    return(mean(results))
  }
  subset <- forward.search(names(iris)[-5], evaluator)
  f <- as.simple.formula(subset, "Species")
  print(f)
  iris <- pod
summary(iris)
colnames(iris)[24] <- "Species"
summary(iris)
  iris <- pod
pod$O3 <- cut(pod$O3, c(-Inf, 60, 120, 180, Inf), labels=c("NIZKA", "SREDNJA", "VISOKA", "EKSTREMNA"))
pod$PM10 <- cut(pod$PM10, c(-Inf,35,Inf),labels=c("NIZKA","VISOKA"))
    evaluator <- function(subset) {
    #k-fold cross validation
    k <- 5
    splits <- runif(nrow(iris))
    results = sapply(1:k, function(i) {
      test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
      train.idx <- !test.idx
      test <- iris[test.idx, , drop=FALSE]
      train <- iris[train.idx, , drop=FALSE]
      tree <- rpart(as.simple.formula(subset, "PM10"), train)
      error.rate = sum(test$PM10 != predict(tree, test, type="c")) / nrow(test)
      return(1 - error.rate)
    })
    print(subset)
    print(mean(results))
    return(mean(results))
  }
  subset <- forward.search(names(iris)[-24], evaluator)
?predict.rpart 
    evaluator <- function(subset) {
    #k-fold cross validation
    k <- 5
    splits <- runif(nrow(iris))
    results = sapply(1:k, function(i) {
      test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
      train.idx <- !test.idx
      test <- iris[test.idx, , drop=FALSE]
      train <- iris[train.idx, , drop=FALSE]
      tree <- rpart(as.simple.formula(subset, "PM10"), train)
      error.rate = sum(test$PM10 != predict(tree, test, type="class")) / nrow(test)
      return(1 - error.rate)
    })
    print(subset)
    print(mean(results))
    return(mean(results))
  }
pod$O3 <- cut(pod$O3, c(-Inf, 60, 120, 180, Inf), labels=c("NIZKA", "SREDNJA", "VISOKA", "EKSTREMNA"))
  iris <- pod
  subset <- forward.search(names(iris)[-24], evaluator)
f <- as.simple.formula(subset, "PM10")
  f <- as.simple.formula(subset, "PM10")
  print(f)
q()
