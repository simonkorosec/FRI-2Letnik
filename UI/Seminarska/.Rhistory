plot(y=avgO3Lj, x=Leto, axes=F, ylab="", xlab="", col="red" , type="b")
plot(neki$Leto, neki$avgO3Kp)
par(new=T)
plot(y=avgO3Lj, x=Leto, axes=F, ylab="", xlab="", col="red" , type="b")
neki1 <- data.frame(avgO3Lj, Leto)
neki1
plot(neki$Leto, neki$avgO3Kp)
par(new=T)
plot(neki1$Leto, neki1$avgO3Lj)
hist(pod$PM10)
hist(pod$O3)
hist(pod$PM10)
hist(pod$PM10)
hist(pod$PM10, xlab="Vrednost", ylab="Frekvenca", main="Porazdelitev atributa PM10")
hist(pod$O3, xlab="Vrednost", ylab="Frekvenca", main="Porazdelitev atributa O3")
plot(pod$PM10)
plot(pod$O3)
summary(pod)
pod$D <- as.factor(pod$Datum)
summary(pod)
meritve <- as.factor(pod$Datum)
meritve
summary(meritve)
k <- nrow(meritve)
k
nrow(meritve)
meritve
length(meritve)
k <-length(meritve)
k
v <- c()
for (i in 1:k){
m <- meritve[i]
v[i] <- mean(pod$O3[pod$Datum == m])
}
warnings()
v[i] <- mean(pod$O3[pod$ == m])
v <- c()
for (i in 1:k){
m <- meritve[i]
v[i] <- mean(pod$O3[pod$D == m])
}
v
plot(v)
plot(x=meritve, y=v)
v <- c()
for (i in 1:k){
m <- meritve[i]
v[i] <- mean(pod$O3[as.factor(pod$Datum) == m])
}
v
plot(v)
plot(v)
plot(x=meritve, y=v)
history()
meritve
v <- c()
meritve <- as.factor(pod$Datum)
pod$Datum <- as.factor(pod$Datum)
for (i in 1:k){
m <- meritve[i]
v[i] <- mean(pod$O3[pod$Datum == m])
}
plot(v)
plot(x=meritve, y=v, xlab="Datum meritve", ylab="Vrednost ozona", main="Vrednost koncentracije ozona skozi leta")
avgPM10Lj <- c()
avgPM10Kp <- c()
for (i in 1:4){
leto <- 2012 + i
avgPM10Lj[i] <- mean(pod$PM10[pod$Postaja == "Ljubljana" & pod$Leto == leto])
avgPM10Kp[i] <- mean(pod$PM10[pod$Postaja == "Koper" & pod$Leto == leto])
}
Leto <- c(2013,2014,2015,2016)
plot(y=avgPM10Kp, x=Leto, xlab="Leto", ylab="Koncentracija delcev PM10", main="Povprecna koncetracija delcev PM10 na leto", type="b")
par(new=T)
plot(avgPM10Lj , axes=F, ylab="", xlab="", col="red" , type="b")
plot(y=avgPM10Kp, x=Leto, xlab="Leto", ylab="Koncentracija delcev PM10", main="Povpreèna koncetracija delcev PM10 na leto", type="b")
par(new=T)
plot(avgPM10Lj , axes=F, ylab="", xlab="", col="red" , type="b")
summary(pod)
barplot(pod$PM10)
boxplot(pod$PM10)
avgPM10Lj <- c()
avgPM10Kp <- c()
for (i in 1:4){
leto <- 2012 + i
avgPM10Lj[i] <- mean(pod$PM10[pod$Postaja == "Ljubljana" & pod$Leto == leto])
avgPM10Kp[i] <- mean(pod$PM10[pod$Postaja == "Koper" & pod$Leto == leto])
}
Leto <- c(2013,2014,2015,2016)
plot(y=avgPM10Kp, x=Leto, xlab="Leto", ylab="Koncentracija delcev PM10", main="Povpreèna koncetracija delcev PM10 na leto", type="b")
par(new=T)
plot(avgPM10Lj , axes=F, ylab="", xlab="", col="red" , type="b")
avgPM10Lj <- c()
avgPM10Kp <- c()
for (i in 1:4){
leto <- 2012 + i
avgPM10Lj[i] <- mean(pod$PM10[pod$Postaja == "Ljubljana" & pod$Leto == leto])
avgPM10Kp[i] <- mean(pod$PM10[pod$Postaja == "Koper" & pod$Leto == leto])
}
Leto <- c(2013,2014,2015,2016)
plot(y=avgPM10Lj , x=Leto, xlab="Leto", ylab="Koncentracija delcev PM10", main="Povpreèna koncetracija delcev PM10 na leto", type="b")
par(new=T)
plot(avgPM10Kp, axes=F, ylab="", xlab="", col="red" , type="b")
#
avgPM10Lj <- c()
avgPM10Kp <- c()
for (i in 1:4){
leto <- 2012 + i
avgPM10Lj[i] <- mean(pod$PM10[pod$Postaja == "Ljubljana" & pod$Leto == leto])
avgPM10Kp[i] <- mean(pod$PM10[pod$Postaja == "Koper" & pod$Leto == leto])
}
Leto <- c(2013,2014,2015,2016)
plot(y=avgPM10Kp, x=Leto, xlab="Leto", ylab="Koncentracija delcev PM10", main="Povprecna koncetracija delcev PM10 na leto", type="b")
par(new=T)
plot(avgPM10Lj , axes=F, ylab="", xlab="", col="red" , type="b")
pod <- read.table("podatkiSem1.txt", sep=",", header=T)
pod$Glob_sevanje_min <- NULL
pod$Datum <- as.Date(pod$Datum, "%Y-%m-%d")
pod$Mesec <- months(pod$Datum)
pod$Mesec <- as.factor(pod$Mesec)
zima <- pod$Mesec == "februar" | pod$Mesec == "januar" | pod$Mesec == "december"
pomlad <- pod$Mesec == "marec" | pod$Mesec == "april" | pod$Mesec == "maj"
poletje <- pod$Mesec == "junij" | pod$Mesec == "julij" | pod$Mesec == "avgust"
jesen <- pod$Mesec == "september" | pod$Mesec == "oktober" | pod$Mesec == "november"
pod$Letni_cas[zima] <- "zima"
pod$Letni_cas[pomlad] <- "pomlad"
pod$Letni_cas[poletje] <- "poletje"
pod$Letni_cas[jesen] <- "jesen"
pod$Letni_cas <- as.factor(pod$Letni_cas)
pod$Mesec <- NULL
pod$Datum <- NULL
pod <- read.table("podatkiSem1.txt", sep=",", header=T)
pod$Glob_sevanje_min <- NULL
pod$Datum <- as.Date(pod$Datum, "%Y-%m-%d")
pod$Mesec <- months(pod$Datum)
pod$Mesec <- as.factor(pod$Mesec)
zima <- pod$Mesec == "februar" | pod$Mesec == "januar" | pod$Mesec == "december"
pomlad <- pod$Mesec == "marec" | pod$Mesec == "april" | pod$Mesec == "maj"
poletje <- pod$Mesec == "junij" | pod$Mesec == "julij" | pod$Mesec == "avgust"
jesen <- pod$Mesec == "september" | pod$Mesec == "oktober" | pod$Mesec == "november"
pod$Letni_cas[zima] <- "zima"
pod$Letni_cas[pomlad] <- "pomlad"
pod$Letni_cas[poletje] <- "poletje"
pod$Letni_cas[jesen] <- "jesen"
pod$Letni_cas <- as.factor(pod$Letni_cas)
pod$Mesec <- NULL
pod$Datum <- NULL
write.table(pod, "noviPodatki.txt", sep=",")
write.table(pod, "noviPodatki.txt", sep=",", row.names="FALSE")
write.table(pod, "noviPodatki.txt", sep=",", row.names=FALSE)
pod$Datum <- as.Date(pod$Datum, "%Y-%m-%d")
pod$Mesec <- months(pod$Datum)
pod$Mesec <- as.factor(pod$Mesec)
zima <- pod$Mesec == "februar" | pod$Mesec == "januar" | pod$Mesec == "december"
pomlad <- pod$Mesec == "marec" | pod$Mesec == "april" | pod$Mesec == "maj"
poletje <- pod$Mesec == "junij" | pod$Mesec == "julij" | pod$Mesec == "avgust"
jesen <- pod$Mesec == "september" | pod$Mesec == "oktober" | pod$Mesec == "november"
pod$Letni_cas[zima] <- "zima"
pod$Letni_cas[pomlad] <- "pomlad"
pod$Letni_cas[poletje] <- "poletje"
pod$Letni_cas[jesen] <- "jesen"
pod$Letni_cas <- as.factor(pod$Letni_cas)
pod$Mesec <- NULL
pod$Datum <- NULL
# Zapis nove množice podatkov
write.table(pod, "noviPodatki.txt", sep=",", row.names=FALSE)
pod <- read.table("noviPodatki.txt", sep=",", header=T)
pod$PM10 <- cut(pod$PM10, c(-Inf,35,Inf),labels=c("NIZKA","VISOKA"))
v <- vector()
for (i in 1:50) {
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
which.max(table(learn$PM10))
majority.class <- names(which.max(table(learn$PM10)))
v[i] <- sum(test$PM10== majority.class) / length(test$PM10)
}
mean(v)
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
modelDT <- CoreModel(PM10 ~ ., learn, model="tree")
modelRF <- CoreModel(PM10 ~ ., learn, model="rf")
modelRFN <- CoreModel(PM10 ~ ., learn, model="rfNear")
modelKNN <- CoreModel(PM10 ~ ., learn, model="knn", kInNN = 5)
predDT <- predict(modelDT, test, type = "class")
predRF <- predict(modelRF, test, type="class")
predKNN <- predict(modelKNN, test, type="class")
predRFN <- predict(modelRFN, test, type="class")
pred <- data.frame(predDT, predKNN, predRF, predRFN)
predicted <- voting(pred)
CA(test$PM10, predicted)
source("mojefunkcije.R")
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
modelDT <- CoreModel(PM10 ~ ., learn, model="tree")
modelRF <- CoreModel(PM10 ~ ., learn, model="rf")
modelRFN <- CoreModel(PM10 ~ ., learn, model="rfNear")
modelKNN <- CoreModel(PM10 ~ ., learn, model="knn", kInNN = 5)
predDT <- predict(modelDT, test, type = "class")
predRF <- predict(modelRF, test, type="class")
predKNN <- predict(modelKNN, test, type="class")
predRFN <- predict(modelRFN, test, type="class")
pred <- data.frame(predDT, predKNN, predRF, predRFN)
predicted <- voting(pred)
CA(test$PM10, predicted)
source("mojefunkcije.R")
source("mojefunkcije.R")
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
modelDT <- CoreModel(PM10 ~ ., learn, model="tree")
modelRF <- CoreModel(PM10 ~ ., learn, model="rf")
modelRFN <- CoreModel(PM10 ~ ., learn, model="rfNear")
modelKNN <- CoreModel(PM10 ~ ., learn, model="knn", kInNN = 5)
predDT <- predict(modelDT, test, type = "class")
predRF <- predict(modelRF, test, type="class")
predKNN <- predict(modelKNN, test, type="class")
predRFN <- predict(modelRFN, test, type="class")
pred <- data.frame(predDT, predKNN, predRF, predRFN)
predicted <- voting(pred)
CA(test$PM10, predicted)
library(CORElearn)
library(randomForest)
library(ipred)
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
modelDT <- CoreModel(PM10 ~ ., learn, model="tree")
modelRF <- CoreModel(PM10 ~ ., learn, model="rf")
modelRFN <- CoreModel(PM10 ~ ., learn, model="rfNear")
modelKNN <- CoreModel(PM10 ~ ., learn, model="knn", kInNN = 5)
predDT <- predict(modelDT, test, type = "class")
predRF <- predict(modelRF, test, type="class")
predKNN <- predict(modelKNN, test, type="class")
predRFN <- predict(modelRFN, test, type="class")
pred <- data.frame(predDT, predKNN, predRF, predRFN)
predicted <- voting(pred)
CA(test$PM10, predicted)
lm.model <- lm(O3 ~ .,data=learn)
 lm.model
predicted<-predict(lm.model,test)
observed<-test$O3
mae <- function(observed, predicted)
 {
    mean(abs(observed - predicted))
 }
 rmae <- function(observed, predicted, mean.val)
 {  
    sum(abs(observed - predicted)) / sum(abs(observed - mean.val))
 }
 mse <- function(observed, predicted)
 {
    mean((observed - predicted)^2)
 }
 rmse <- function(observed, predicted, mean.val)
 {  
    sum((observed - predicted)^2)/sum((observed - mean.val)^2)
 }
mae(observed,predicted)
 rmae(observed,predicted,mean(learn$O3))
for i in 1:5 {
k <- 5*i
modelKNN <- CoreModel(formula, learn, model="knn", kInNN = k)
predKNN <- predict(modelKNN, test, type="class")
cv.dt <- CA(test$PM10, predKNN)
cv.dt
}
formula <- as.formula("PM10  ~  .")# Formula 1
for i in 1:5 {
k <- 5*i
modelKNN <- CoreModel(formula, learn, model="knn", kInNN = k)
predKNN <- predict(modelKNN, test, type="class")
cv.dt <- CA(test$PM10, predKNN)
cv.dt
}
for (i in 1:5) {
k <- 5*i
modelKNN <- CoreModel(formula, learn, model="knn", kInNN = k)
predKNN <- predict(modelKNN, test, type="class")
cv.dt <- CA(test$PM10, predKNN)
cv.dt
}
cv.dt
cv.dt <- c()
for (i in 1:5) {
k <- 5*i
modelKNN <- CoreModel(formula, learn, model="knn", kInNN = k)
predKNN <- predict(modelKNN, test, type="class")
cv.dt[i] <- CA(test$PM10, predKNN)
}
cv.dt
bag <- bagging(formula, learn, nbagg=25)
bag.pred <- predict(bag, test, type="class")
cv.dt <- CA(observed, bag.pred)
cv.dt
pod$PM10 <- cut(pod$PM10, c(-Inf,35,Inf),labels=c("NIZKA","VISOKA"))
pod <- read.table("noviPodatki.txt", sep=",", header=T)
pod$PM10 <- cut(pod$PM10, c(-Inf,35,Inf),labels=c("NIZKA","VISOKA"))
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
bag <- bagging(formula, learn, nbagg=25)
bag.pred <- predict(bag, test, type="class")
cv.dt <- CA(observed, bag.pred)
cv.dt
bag <- bagging(formula, learn, nbagg=25)
bag.pred <- predict(bag, test, type="class")
cv.dt <- CA(observed, bag.pred)
cv.dt
history()
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
bag <- bagging(formula, learn, nbagg=25)
bag.pred <- predict(bag, test, type="class")
cv.dt <- CA(observed, bag.pred)
cv.dt
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
bag <- bagging(formula, learn, nbagg=25)
bag.pred <- predict(bag, test, type="class")
cv.dt <- CA(observed, bag.pred)
cv.dt
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
bag <- bagging(formula, learn, nbagg=25)
bag.pred <- predict(bag, test, type="class")
cv.dt <- CA(observed, bag.pred)
cv.dt
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
bag <- bagging(formula, learn, nbagg=25)
bag.pred <- predict(bag, test, type="class")
cv.dt <- CA(observed, bag.pred)
cv.dt
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
bag <- bagging(formula, learn, nbagg=25)
bag.pred <- predict(bag, test, type="class")
cv.dt <- CA(observed, bag.pred)
cv.dt
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$PM10
bag <- bagging(formula, learn, nbagg=25)
bag.pred <- predict(bag, test, type="class")
cv.dt[i] <- CA(observed, bag.pred)
}
mean(cv.dt)
norm.data <- scale.data(pod)
norm.learn <- norm.data[sel,]
norm.test <- norm.data[-sel,]
nn <- nnet(formula, data = norm.learn, size = 5, decay = 0.00001, maxit = 100000)
predicted <- predict(nn, norm.test, type = "class")
CA(norm.test$PM10, predicted)
library(CORElearn)
library(ipred)
library(nnet)
norm.data <- scale.data(pod)
norm.learn <- norm.data[sel,]
norm.test <- norm.data[-sel,]
nn <- nnet(formula, data = norm.learn, size = 5, decay = 0.00001, maxit = 100000)
predicted <- predict(nn, norm.test, type = "class")
CA(norm.test$PM10, predicted)
norm.data <- scale.data(pod)
norm.learn <- norm.data[sel,]
norm.test <- norm.data[-sel,]
nn <- nnet(formula, data = norm.learn, size = 8, decay = 0.001, maxit = 100000)
predicted <- predict(nn, norm.test, type = "class")
cv.dt <- CA(norm.test$PM10, predicted)
cv.dt
norm.data <- scale.data(pod)
norm.learn <- norm.data[sel,]
norm.test <- norm.data[-sel,]
nn <- nnet(formula, data = norm.learn, size = 8, decay = 0.01, maxit = 100000)
predicted <- predict(nn, norm.test, type = "class")
cv.dt <- CA(norm.test$PM10, predicted)
cv.dt
norm.data <- scale.data(pod)
norm.learn <- norm.data[sel,]
norm.test <- norm.data[-sel,]
nn <- nnet(formula, data = learn, size = 8, decay = 0.05, maxit = 1000)
predicted <- predict(nn, norm.test, type = "class")
cv.dt <- CA(norm.test$PM10, predicted)
cv.dt
norm.data <- scale.data(pod)
norm.learn <- norm.data[sel,]
norm.test <- norm.data[-sel,]
nn <- nnet(formula, data = norm.learn, size = 8, decay = 0.05, maxit = 1000)
predicted <- predict(nn, norm.test, type = "class")
cv.dt <- CA(norm.test$PM10, predicted)
cv.dt
norm.data <- scale.data(pod)
norm.learn <- norm.data[sel,]
norm.test <- norm.data[-sel,]
nn <- nnet(formula, data = norm.learn, size = 8, decay = 0.05, maxit = 1000)
predicted <- predict(nn, norm.test, type = "class")
cv.dt <- CA(norm.test$PM10, predicted)
cv.dt
norm.data <- scale.data(pod)
norm.learn <- norm.data[sel,]
norm.test <- norm.data[-sel,]
nn <- nnet(formula, data = norm.learn, size = 8, decay = 0.005, maxit = 1000)
predicted <- predict(nn, norm.test, type = "class")
cv.dt <- CA(norm.test$PM10, predicted)
cv.dt
library(randomForest)
library(adabag)
rf <- randomForest(formula, learn)
predicted <- predict(rf, test, type = "class")
CA(test$O3, predicted)
pod <- read.table("noviPodatki.txt", sep=",", header=T)
pod$O3 <- cut(pod$O3, c(-Inf, 60, 120, 180, Inf), labels=c("NIZKA", "SREDNJA", "VISOKA", "EKSTREMNA"))
# Izbrane formule
formula <- as.formula("O3  ~  .")# Formula 1
# formula <- as.formula("O3 ~ Temperatura_lokacija_max + Glob_sevanje_mean + Temperatura_Krvavec_mean + Pritisk_mean + Hitrost_vetra_max + Glob_sevanje_max + Temperatura_Krvavec_min + Padavine_sum")# Formula 2
# formula <- as.formula("O3 ~ Glob_sevanje_mean + Glob_sevanje_max + Letni_cas + Temperatura_lokacija_mean + Temperatura_Krvavec_max + Vlaga_min + PM10 + Vlaga_max")      # Formula 3
sel <- sample(1:nrow(pod), size=as.integer(nrow(pod)*0.7), replace=F)
learn <- pod[sel,]
test <- pod[-sel,]
library(randomForest)
library(adabag)
#
# Nakljucni gozd 
#
rf <- randomForest(formula, learn)
predicted <- predict(rf, test, type = "class")
CA(test$O3, predicted)
bm <- boosting(formula, learn)
predictions <- predict(bm, test)
predicted <- predictions$class
CA(test$O3, predicted)
library(kernlab)
svm <- ksvm(formula, data = learn, kernel = "rbfdot")
predicted <- predict(svm, test, type = "response")
CA(test$O3, predicted)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
rf <- randomForest(formula, learn)
predicted <- predict(rf, test, type = "class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
source("mojefunkcije.R")
library(CORElearn)
library(ipred)
library(nnet)
pod <- read.table("noviPodatki.txt", sep=",", header=T)
pod$PM10 <- cut(pod$PM10, c(-Inf,35,Inf),labels=c("NIZKA","VISOKA"))
# Izbrane formule
formula <- as.formula("PM10  ~  .")# Formula 1
# formula <- as.formula("PM10 ~ Temperatura_lokacija_min + Sunki_vetra_max + Padavine_mean + postaja + Temperatura_Krvavec_min + O3 + Sunki_vetra_mean + Temperatura_lokacija_mean ")# Formula 2
# formula <- as.formula("PM10 ~ Temperatura_lokacija_max + Temperatura_lokacija_mean + Letni_cas + O3 + Temperatura_Krvavec_mean + Pritisk_max + Pritisk_mean + Glob_sevanje_max  + Vlaga_min + Glob_sevanje_mean")      # Formula 3
n <- nrow(pod)
k <- 10
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$PM10
modelDT <- CoreModel(formula, learn, model="tree")
modelRF <- CoreModel(formula, learn, model="rf")
modelRFN <- CoreModel(formula, learn, model="rfNear")
modelKNN <- CoreModel(formula, learn, model="knn", kInNN = 20)
predDT <- predict(modelDT, test, type = "class")
predRF <- predict(modelRF, test, type="class")
predKNN <- predict(modelKNN, test, type="class")
predRFN <- predict(modelRFN, test, type="class")
pred <- data.frame(predDT, predKNN, predRF, predRFN)
predicted <- voting(pred)
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
q()
q()
