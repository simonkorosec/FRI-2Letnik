pod <- read.table("podatkiSem1.txt", sep=",", header=T)
pod$Glob_sevanje_min <- NULL
pod$Datum <- as.Date(pod$Datum, "%Y-%m-%d")
pod$Mesec <- months(pod$Datum)
pod$Mesec <- as.factor(pod$Mesec)
zima <- pod$Mesec == "februar" | pod$Mesec == "januar" | pod$Mesec == "december"
pomlad <- pod$Mesec == "marec" | pod$Mesec == "april" | pod$Mesec == "maj"
poletje <- pod$Mesec == "junij" | pod$Mesec == "julij" | pod$Mesec == "avgust"
jesen <- pod$Mesec == "september" | pod$Mesec == "oktober" | pod$Mesec == "november"
pod$Letni_cas[zima] <- "zima"
pod$Letni_cas[pomlad] <- "pomlad"
pod$Letni_cas[poletje] <- "poletje"
pod$Letni_cas[jesen] <- "jesen"
pod$Letni_cas <- as.factor(pod$Letni_cas)
pod$Mesec <- NULL
pod$Datum <- NULL
#
# Klasifikacija
#
#pod$O3 <- cut(pod$O3, c(-Inf, 60, 120, 180, Inf), labels=c("NIZKA", "SREDNJA", "VISOKA", "EKSTREMNA"))
#pod$PM10 <- cut(pod$PM10, c(-Inf,35,Inf),labels=c("NIZKA","VISOKA"))
source("mojefunkcije.R")
source("wrapper.R")
n <- nrow(pod)
k <- 1
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
modelKNN <- CoreModel(formula, learn, model="rf")
predKNN <- predict(modelKNN, test, type="class")
cv.dt[i] <- CA(observed, predKNN)
}
mean(cv.dt)
library(CoreLearn)
library(CORElearn)
library(randomForest)
library(ipred),
library(ipred)
library(adabag)
summary(pod)
pod$O3 <- cut(pod$O3, c(-Inf, 60, 120, 180, Inf), labels=c("NIZKA", "SREDNJA", "VISOKA", "EKSTREMNA"))
summary(pod)
n <- nrow(pod)
k <- 1
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
modelKNN <- CoreModel(formula, learn, model="rf")
predKNN <- predict(modelKNN, test, type="class")
cv.dt[i] <- CA(observed, predKNN)
}
mean(cv.dt)
formula <- as.formula("O3 ~ .")
n <- nrow(pod)
k <- 1
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
modelKNN <- CoreModel(formula, learn, model="rf")
predKNN <- predict(modelKNN, test, type="class")
cv.dt[i] <- CA(observed, predKNN)
}
mean(cv.dt)
 warnings()
summary(pod)
formula <- as.formula("O3 ~ .")
n <- nrow(pod)
k <- 1
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
modelKNN <- CoreModel(formula, learn, model="rf")
predKNN <- predict(modelKNN, test, type="class")
cv.dt[i] <- CA(observed, predKNN)
}
mean(cv.dt)
pod
n <- nrow(pod)
k <- 1
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
modelKNN <- CoreModel(formula, learn, model="rf")
predKNN <- predict(modelKNN, test, type="class")
cv.dt[i] <- CA(observed, predKNN)
}
mean(cv.dt)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
svm <- ksvm(formula, data = learn, kernel = "rbfdot")
predicted <- predict(svm, test, type = "response")
#sm <- svm(formula, data = learn)
#predicted <- predict(sm, test, type="class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
library(kernlab)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
svm <- ksvm(formula, data = learn, kernel = "rbfdot")
predicted <- predict(svm, test, type = "response")
#sm <- svm(formula, data = learn)
#predicted <- predict(sm, test, type="class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
formula
formula <- as.formula("O3 ~ Temperatura_lokacija_max + Glob_sevanje_mean + Temperatura_Krvavec_mean + Pritisk_mean + Hitrost_vetra_max + Glob_sevanje_max + Temperatura_Krvavec_min + Padavine_sum")
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
svm <- ksvm(formula, data = learn, kernel = "rbfdot")
predicted <- predict(svm, test, type = "response")
#sm <- svm(formula, data = learn)
#predicted <- predict(sm, test, type="class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
sort(attrEval(formula, pod, "Relief"), decreasing = TRUE)
sort(attrEval(formula, pod, "ReliefFequalK"), decreasing = TRUE)
summary(pod)
sort(attrEval(O3 ~ ., pod, "Relief"), decreasing = TRUE)
sort(attrEval(O3 ~ ., pod, "ReliefFequalK"), decreasing = TRUE)
sort(attrEval(O3 ~ ., pod, "ReliefFexpRank"), decreasing = TRUE)
sort(attrEval(O3 ~ ., pod, "MDL"), decreasing = TRUE)
formula <- as.formula("O3 ~ Glob_sevanje_mean + Glob_sevanje_max + Letni_cas + Temperatura_lokacija_mean + Temperatura_Krvavec_max + Vlaga_min + PM10 + Vlaga_max")
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
rf <- randomForest(formula, learn)
predicted <- predict(rf, test, type = "class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
rf <- randomForest(formula, learn)
predicted <- predict(rf, test, type = "class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
rf <- randomForest(formula, learn)
predicted <- predict(rf, pod, type = "class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
rf <- randomForest(formula, learn)
predicted <- predict(rf, test, type = "class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- test[sel,]$O3
rf <- randomForest(formula, learn)
predicted <- predict(rf, test, type = "class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- test[sel,]$O3
rf <- randomForest(formula, learn)
predicted <- predict(rf, test, type = "class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
rf <- randomForest(formula, learn)
predicted <- predict(rf, test, type = "class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
bm <- boosting(formula, learn)
predictions <- predict(bm, test)
predicted <- predictions$class
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
svm <- ksvm(formula, data = learn, kernel = "rbfdot")
predicted <- predict(svm, test, type = "response")
#sm <- svm(formula, data = learn)
#predicted <- predict(sm, test, type="class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
summary(pod)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
#svm <- ksvm(formula, data = learn, kernel = "rbfdot")
#predicted <- predict(svm, test, type = "response")
sm <- svm(formula, data = learn)
predicted <- predict(sm, test, type="class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
library(e1071)
n <- nrow(pod)
k <- 15
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
#svm <- ksvm(formula, data = learn, kernel = "rbfdot")
#predicted <- predict(svm, test, type = "response")
sm <- svm(formula, data = learn)
predicted <- predict(sm, test, type="class")
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
n <- nrow(pod)
k <- 1
bucket.id <- rep(1:k, length.out=n)
s <- sample(1:n, n, FALSE)
bucket.id <- bucket.id[s]
cv.dt <- vector()
for (i in 1:k)
{
print(paste("Processing fold", i))
flush.console()
sel <- bucket.id == i
learn <- pod[!sel,]
test <- pod[sel,]
observed <- pod[sel,]$O3
modelDT <- CoreModel(formula, learn, model="tree")
modelRF <- CoreModel(formula, learn, model="rf")
modelRFN <- CoreModel(formula, learn, model="rfNear")
modelKNN <- CoreModel(formula, learn, model="knn", kInNN = 25)
predDT <- predict(modelDT, test, type = "class")
predRF <- predict(modelRF, test, type="class")
predKNN <- predict(modelKNN, test, type="class")
predRFN <- predict(modelRFN, test, type="class")
caDT <- CA(observed, predDT)
caRF <- CA(observed, predRF)
caRFN <- CA(observed, predRFN)
caKNN <- CA(observed, predKNN)
predDT.prob <- predict(modelDT, test, type="probability")
predRF.prob <- predict(modelRF, test, type="probability")
predRFN.prob <- predict(modelRFN, test, type="probability")
predKNN.prob <- predict(modelKNN, test, type="probability")
pred.prob <- caDT * predDT.prob + caRF * predRF.prob + caRFN * predRFN.prob + caKNN * predKNN.prob
predicted <- levels(learn$O3)[apply(pred.prob, 1, which.max)]
cv.dt[i] <- CA(observed, predicted)
}
mean(cv.dt)
q()
